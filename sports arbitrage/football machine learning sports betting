import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

def load_football_data(filepath='football_data.csv'):
    """
    Loads football match data from a CSV file.

    Expected CSV format:
    Date,HomeTeam,AwayTeam,FTHG,FTAG,FTR,HomeOdds,DrawOdds,AwayOdds,... (other stats)
    - Date: Date of the match
    - HomeTeam: Name of the home team
    - AwayTeam: Name of the away team
    - FTHG: Full Time Home Goals
    - FTAG: Full Time Away Goals
    - FTR: Full Time Result (H=Home Win, D=Draw, A=Away Win)
    - HomeOdds, DrawOdds, AwayOdds: Betting odds for the match outcome.
    - ... and any other features you want to include (e.g., team form, player stats).

    Args:
        filepath (str): The path to the CSV file.

    Returns:
        pandas.DataFrame: A DataFrame containing the loaded data.
    """
    try:
        # Create a dummy dataframe for demonstration if file doesn't exist
        data = {
            'HomeTeam': ['Man City', 'Liverpool', 'Chelsea', 'Arsenal', 'Man United', 'Tottenham'],
            'AwayTeam': ['Liverpool', 'Man City', 'Arsenal', 'Chelsea', 'Tottenham', 'Man United'],
            'FTR': ['H', 'A', 'D', 'H', 'A', 'D'], # H: Home, A: Away, D: Draw
            'HomeTeamGoals': [3, 1, 1, 2, 0, 2],
            'AwayTeamGoals': [1, 2, 1, 0, 1, 2],
            'HomeOdds': [1.5, 2.5, 2.0, 1.8, 2.2, 2.1],
            'DrawOdds': [3.5, 3.0, 3.2, 3.4, 3.1, 3.3],
            'AwayOdds': [4.0, 1.8, 2.8, 3.0, 2.5, 2.6]
        }
        df = pd.DataFrame(data)
        df.to_csv(filepath, index=False)
        print(f"Created dummy data at '{filepath}'")
        return df
    except FileNotFoundError:
        print(f"Error: The file '{filepath}' was not found.")
        print("Please make sure you have a CSV file with historical match data.")
        return None

def preprocess_data(df):
    """
    Preprocesses the raw football data for model training.

    Args:
        df (pandas.DataFrame): The raw data.

    Returns:
        tuple: A tuple containing the processed features (X) and target (y).
    """
    # Define features (X) and target (y)
    # For this example, we'll use teams and odds as features.
    # You should experiment with more features for better performance!
    features = ['HomeTeam', 'AwayTeam', 'HomeOdds', 'DrawOdds', 'AwayOdds']
    target = 'FTR'

    X = df[features]
    y = df[target]

    # Define the categorical and numerical features
    categorical_features = ['HomeTeam', 'AwayTeam']
    numerical_features = ['HomeOdds', 'DrawOdds', 'AwayOdds']

    # Create a preprocessor object to handle categorical features
    # We use OneHotEncoder to convert team names into a numerical format.
    preprocessor = ColumnTransformer(
        transformers=[
            ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)
        ],
        remainder='passthrough' # Keep numerical features as they are
    )

    X_processed = preprocessor.fit_transform(X)

    return X_processed, y, preprocessor

def train_and_evaluate_model(X, y):
    """
    Trains a logistic regression model and evaluates its performance.

    Args:
        X (numpy.ndarray): The processed features.
        y (pandas.Series): The target variable.

    Returns:
        sklearn.linear_model.LogisticRegression: The trained model.
    """
    # Split data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Initialize and train the model
    model = LogisticRegression(max_iter=1000)
    model.fit(X_train, y_train)

    # Make predictions on the test set
    y_pred = model.predict(X_test)

    # Evaluate the model
    accuracy = accuracy_score(y_test, y_pred)
    print(f"\nModel Accuracy: {accuracy:.2f}")
    print("\nClassification Report:")
    print(classification_report(y_test, y_pred, zero_division=0))

    return model

def predict_new_match(model, preprocessor, home_team, away_team, home_odds, draw_odds, away_odds):
    """
    Predicts the outcome of a new match.

    Args:
        model: The trained machine learning model.
        preprocessor: The preprocessor used for the training data.
        home_team (str): Name of the home team.
        away_team (str): Name of the away team.
        home_odds (float): Betting odds for a home win.
        draw_odds (float): Betting odds for a draw.
        away_odds (float): Betting odds for an away win.
    """
    # Create a DataFrame for the new match
    new_match_data = pd.DataFrame({
        'HomeTeam': [home_team],
        'AwayTeam': [away_team],
        'HomeOdds': [home_odds],
        'DrawOdds': [draw_odds],
        'AwayOdds': [away_odds]
    })

    # Preprocess the new data
    new_match_processed = preprocessor.transform(new_match_data)

    # Make a prediction
    prediction = model.predict(new_match_processed)
    prediction_proba = model.predict_proba(new_match_processed)

    print("\n--- New Match Prediction ---")
    print(f"Match: {home_team} vs {away_team}")
    print(f"Predicted Outcome: {prediction[0]} (H=Home Win, D=Draw, A=Away Win)")
    print("Prediction Probabilities:")
    for i, class_label in enumerate(model.classes_):
        print(f"  - {class_label}: {prediction_proba[0][i]:.2f}")
    print("--------------------------")


if __name__ == '__main__':
    # 1. Load Data
    data_df = load_football_data()

    if data_df is not None:
        # 2. Preprocess Data
        X_processed, y_target, data_preprocessor = preprocess_data(data_df)

        # 3. Train and Evaluate Model
        trained_model = train_and_evaluate_model(X_processed, y_target)

        # 4. Predict a new match
        predict_new_match(
            model=trained_model,
            preprocessor=data_preprocessor,
            home_team='Man City',
            away_team='Arsenal',
            home_odds=1.4,
            draw_odds=3.8,
            away_odds=5.0
        )