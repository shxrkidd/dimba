import argparse
from datetime import datetime, timedelta
import pandas as pd
import jax
import jax.numpy as jnp
import flax.linen as nn
from colorama import Fore, Style
import requests
import json

# football data 
# use these free football data providers and utilities
# Get all competitions

#StatsBomb data
#fetch competitions and matches from StatsBomb's open data repository
comps_url = "https://raw.githubusercontent.com/statsbomb/open-data/master/data/competitions.json"
competitions = requests.get(comps_url).json()

all_matches = []
for comp in competitions:
    comp_id = comp['competition_id']
    season_id = comp['season_id']
    matches_url = f"https://raw.githubusercontent.com/statsbomb/open-data/master/data/matches/{comp_id}/{season_id}.json"
    matches = requests.get(matches_url).json()
    all_matches.extend(matches)

print(f"Fetched {len(all_matches)} matches from {len(competitions)} competitions.")

#Club Elo data ---
elo_url = "http://api.clubelo.com/fixtures"
elo_matches = pd.read_csv(elo_url)
print(elo_matches.head())

# FiveThirtyEight data
fivethirtyeight_url = "https://projects.fivethirtyeight.com/soccer-api/club/spi_matches.csv"
fivethirtyeight_matches = pd.read_csv(fivethirtyeight_url)
print(fivethirtyeight_matches.head())

#get team names and their IDs

def get_teams_from_openfootball(raw_json_url):
    import requests
    response = requests.get(raw_json_url)
    data = response.json()
     # Some files use "clubs", some use "teams"
    key = "clubs" if "clubs" in data else "teams"
    # Not all teams have an 'id', so fallback to name if missing
    teams = {team['name']: team.get('id', team['name']) for team in data[key]}
    return teams
